Key:

o Incomplete task
/ Task in progress
X Completed task
! Attention required


Tasks:
X Finish compile_processed... function
/ Finish pausing analysis function
/ Cleanup computeMigrationStats
o Do thorough QC on computeMigrationStats
o Do thorough QC on lut/UT integrity 
o Begin documentation
0investigate 'speed2' in processed data structure
X rename CI and CI2 
o investigate confinement_radius
X add ongoing status tracker to keep track of which steps in the pipeline have been processed, what errors occurred etc. 
X alter stepNum input so that it takes a vector instead of a number
X look into an alternative strategy for concatenating tables with headers

2021-09-18
I was working on the function for analyzing the pause behavior when I realized that a crucial step was missing. I need to compile all of the processed data into a
single data structure that will be stored in the masterPath with the variables folder. This structure organizes all of the data by treatment and experimental day -
which is important later for plotting and statistics. 

To deal with this, I created a new function titled: compile_processed_data and am working from the orginal (too long) code I had worked on before. 
Most likely, I will incorporate the pausing analysis into the computeMigration stats so that the output values get incorporated into the processed 
data structure and saved for each experiment. 

I noticed that in the processed data structure, there are two speed values - figure out what the deal is and eliminate if redundant



2021-09-19
In running compile_processed... fxn, following error was thrown:

	Error using matlab.internal.editor.evaluateCode
	Java exception occurred:
	java.io.IOException: java.lang.RuntimeException: Internal Exception in writing MLX file : Could not close zip entry that was open
	for write

		at com.mathworks.services.mlx.MlxFileUtils.writeCode(MlxFileUtils.java:265)

	Caused by: java.lang.RuntimeException: Internal Exception in writing MLX file : Could not close zip entry that was open for write

		at com.mathworks.services.mlx.MlxFileUtils.nativeWriteMlxFile(Native Method)

		at com.mathworks.services.mlx.MlxFileUtils.writeCode(MlxFileUtils.java:262)


	Error in matlab.internal.editor.evaluateCode

*** Due to insufficient disk space *** clearing up space and retrying


X Going back to earlier steps to add status-tracking. This feature will keep track of which steps in the pipeline have been completed, what the status of each step was etc. 
  I can add a check for each step to ensure everything is complete and in order before subsequent steps are performed. 

X Currently in analyzeImarisdata function - going back to add in pausing analysis and pull out track-classification as a pre-requisite


X It occurred to me that not all steps are pre-requisites for following steps - alter stepNum input so that it takes a vector instead of a number. 

2021-09-20
X Currently in analyzeImarisdata function - going back to add in pausing analysis and pull out track-classification as a pre-requisite
	Editing the pause analysis to act at the directory level - figuring out what the input data needs to be and making sure that is properly stored.
! Kinda feeling like the current creation of the allData table is super clunky and will be error prone if the manual entry of headers gets misaligned with the 
  data at any point. I will look into an alternative strategy for concatenating tables with headers so that the headers never have an opportunity to be separated
  from the associated data.


 - the Imaris data is already being stored as a table with headers in the importImarisData function. 
 - it occurred to me that the status check for KJ tracks is probably not working as intended since it's under a try statment embedded within the n (well) loop


X Working to converge calculate_CI_in_vitro and computeMigrationStats. the latter was written early on by Jon, the latter was written by me according to Haynes method of
  CI. These can be combined, some metrics that aren't used can be eliminated
! In looking at the processedData structure, I see two conditions for the rescue data - one labeled RESC and the other labeled Rescue - get to the bottom of this 
X Fixed - the discrepency was in the key file. 

- not sure that the status tracker is working as expected. Confirm that as each step is completed, the tracker is updated, saved and output from any functions to save progress


/ working on function for exporting csv file for R
X LUT needs to be saved into either processedData or expData

! It occurred to me that the export as written is not generalizeable 
X Since cell line is a column in the original data structure and is used in the creation of the group names, I can rely on the group-name pattern to extract cell line 
  automatically
X cell means contains nans even where num pauses and pause duration values exist. another instance of imposing full-length tracks existed in calculate_CI_in_vitro. Changed 
  this to 10, but I would rather find all instances and assign a variable that can be edited and stored during create_user_inputs to avoid any mistakes. 


! Make sure to confirm all measurements are consistent - either pixels or uM!

X Add pausing analysis to same motility analysis function 
/ L table in compile_processed... is currently unused. 


I just realized that I forgot to add code that breaks tracks down by motility class to determine whether there are significant differences in free speed, free directionality etc. 

I also want to add functionality to assess the relationship between distance from the source and motility performance. 




2021-09-28
Update: Going back over previous notes and reviewing output variables to determine today's objectives. 

Processed data structure is saved and contains data for track-level pause analysis (numPauses, duration).
The expData structure indicates a consistent 13 errors - will look into the source of those errors to determine whether they are data or processing issues
The single-cell data structure is sparsely populated with class-specific velocities, but the numbers don't make sense as they are integers. I would expect floating points


I created enhanced error-logging features to expedite de-bugging efforts
The custom warnID is now stored in the error log for reference
the fullFileName is created up-front to ensure a single error-log per step
different steps have unique warnNum-IDs to help pinpoint where failures are occurring 


Found and fixed a recurring bug in the vel_by_class analysis function - mimatch in dimensions between vel_by_class and cellMeans - solved by indexing into scData using cellMeans.cell_ID

I should probably generate an error-handling function that formats the error-logs since I'm integrating such detailed error-handling mechanisms


2021-09-29
Finishing up the compile_processed... function. Adding L functionality where replicate outcomes are logged. 
Integrating detailed error handling protocol adopted in previous functions for continuity
                                                                                              
Currently adding L functionality to the 'Organize processed data structure' section - have to incorporate a way to cross-reference replicates during error handling                              